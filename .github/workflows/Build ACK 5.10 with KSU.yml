name: Build ACK 5.10 with KSU
on:
  workflow_dispatch:
    inputs:
      TAG:
        required: true
        default: "android12-5.10-2023-07"

jobs:
  build:
    name: Build ${{ github.event.inputs.TAG }}
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_MAXSIZE: "2G"
      CCACHE_HARDLINK: "true"
    steps:
    - name: Maximize Build Space
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 8192
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
    - uses: actions/checkout@main
    - uses: hendrikmuhs/ccache-action@main
      with:
        key: ${{ github.event.inputs.TAG }}
        append-timestamp: false
    - name: Download Kernel Source
      run: |
        echo "Free space:"
        df -h
        cd $GITHUB_WORKSPACE
        git clone https://github.com/tiann/KernelSU.git
        sudo apt-get install repo -y
        mkdir android-kernel && cd android-kernel
        repo init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-${{ github.event.inputs.TAG }} --repo-rev=v2.16
        REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common ${{ github.event.inputs.TAG }})
        DEFAULT_MANIFEST_PATH=.repo/manifests/default.xml
        if grep -q deprecated <<< $REMOTE_BRANCH; then
          echo "Found deprecated branch: ${{ github.event.inputs.TAG }}"
          sed -i 's/"${{ github.event.inputs.TAG }}"/"deprecated\/${{ github.event.inputs.TAG }}"/g' $DEFAULT_MANIFEST_PATH
        fi
        repo --version
        repo --trace sync -q -c -j$(nproc --all) --no-tags
        if [ -d prebuilts/clang/host/linux-x86 ] && [ -f common/build.config.constants ]; then
          ls -d prebuilts/clang/host/linux-x86/clang-r* | grep -v $(sed -n 's/^CLANG_VERSION=//p' common/build.config.constants)
        fi
        rm -rf .repo
        df -h
    - name: Setup KernelSU
      run: |
        echo "[+] KernelSU setup"
        cd $GITHUB_WORKSPACE/android-kernel
        GKI_ROOT=$(pwd)
        echo "[+] GKI_ROOT: $GKI_ROOT"
        echo "[+] Copy kernel su driver to $GKI_ROOT/common/drivers"
        ln -sf $GITHUB_WORKSPACE/KernelSU/kernel $GKI_ROOT/common/drivers/kernelsu
        echo "[+] Add kernel su driver to Makefile"
        DRIVER_MAKEFILE=$GKI_ROOT/common/drivers/Makefile
        grep -q "kernelsu" $DRIVER_MAKEFILE || echo "obj-y += kernelsu/" >> $DRIVER_MAKEFILE
        echo "[+] Apply KernelSU patches"
        cd $GKI_ROOT/common/ && git apply $GITHUB_WORKSPACE/KernelSU/.github/patches/5.10/*.patch
        echo "Patch script/setlocalversion"
        sed -i 's/-dirty//g' $GKI_ROOT/common/scripts/setlocalversion
        echo "[+] KernelSU setup done."
    - name: Symbol Magic
      run: |
          echo "[+] Export all symbol from abi_gki_aarch64.xml"
          COMMON_ROOT=$GITHUB_WORKSPACE/android-kernel/common
          KSU_ROOT=$GITHUB_WORKSPACE/KernelSU
          ABI_XML=$COMMON_ROOT/android/abi_gki_aarch64.xml
          SYMBOL_LIST=$COMMON_ROOT/android/abi_gki_aarch64
          # python3 $KSU_ROOT/scripts/abi_gki_all.py $ABI_XML > $SYMBOL_LIST
          echo "[+] Add KernelSU symbols"
          cat $KSU_ROOT/kernel/export_symbol.txt | awk '{sub("[ \t]+","");print "  "$0}' >> $SYMBOL_LIST
    - name: Build Boot
      working-directory: android-kernel
      run: CCACHE="/usr/bin/ccache" BUILD_BOOT_IMG=1 SKIP_VENDOR_BOOT=1 KERNEL_BINARY=Image AVB_SIGN_BOOT_IMG=1 AVB_BOOT_PARTITION_SIZE=$((64*1024*1024)) AVB_BOOT_ALGORITHM=SHA256_RSA2048 AVB_BOOT_KEY=prebuilts/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem BOOT_IMAGE_HEADER_VERSION=4 LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh
    - name: Prepare artifacts
      run: |
        OUTDIR=android-kernel/out/*/dist/
        mkdir output
        cp $OUTDIR/Image ./output/
        git clone https://github.com/Kernel-SU/AnyKernel3
        rm -rf ./AnyKernel3/.git
        cp $OUTDIR/Image ./AnyKernel3/
    - name: Upload Boot
      uses: actions/upload-artifact@v3
      with:
        name: Boot_KernelSU_${{ github.event.inputs.TAG }}
        path: android-kernel/out/*/dist/boot.img
    - name: Upload AnyKernel3
      uses: actions/upload-artifact@v3
      with:
          name: AnyKernel3_KernelSU_${{ github.event.inputs.TAG }}
          path: ./AnyKernel3/*
